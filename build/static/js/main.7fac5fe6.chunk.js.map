{"version":3,"sources":["Todo.js","firebase.js","App.js","reportWebVitals.js","index.js"],"names":["Todo","props","List","className","ListItemAvatar","ListItem","ListItemText","primary","text","secondary","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","App","useState","todos","setTodos","input","setInput","useEffect","collection","orderBy","onSnapshot","snapshot","docs","map","doc","data","todo","FormControl","InputLabel","Input","value","onChange","event","target","Button","disabled","type","onClick","preventDefault","add","timestamp","FieldValue","serverTimestamp","variant","color","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kTAkBeA,MAdf,SAAcC,GACZ,OACE,eAACC,EAAA,EAAD,CAAMC,UAAW,YAAjB,UACI,cAACC,EAAA,EAAD,IAGA,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAcC,QAASN,EAAMO,KAAOC,UAAU,+B,gBCIzCC,EAbKC,IAASC,cAAc,CACnCC,OAAQ,0CACRC,WAAY,iCACZC,YAAa,wCACbC,UAAW,iBACXC,cAAe,6BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAGAC,YCgDRC,MArDf,WACE,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA0BF,mBAAS,IAAnC,mBAAOG,EAAP,KAAcC,EAAd,KA0BA,OAtBAC,qBAAU,WAERlB,EAAGmB,WAAW,SAASC,QAAQ,YAAa,QAAQC,YAAW,SAAAC,GAE1DP,EAASO,EAASC,KAAKC,KAAI,SAAAC,GAAG,OAAIA,EAAIC,OAAOC,cAEjD,IAiBD,sBAAKlC,UAAU,MAAf,UACE,8CACA,iCACA,eAACmC,EAAA,EAAD,WACA,cAACC,EAAA,EAAD,kCACA,cAACC,EAAA,EAAD,CAAOC,MAAOf,EAAOgB,SAAU,SAAAC,GAAK,OAAIhB,EAASgB,EAAMC,OAAOH,aAG9D,cAACI,EAAA,EAAD,CAASC,UAAWpB,EAAOqB,KAAK,SAASC,QArB7B,SAACL,GACfA,EAAMM,iBAGNvC,EAAGmB,WAAW,SAASqB,IAAI,CACzBb,KAAOX,EACPyB,UAAYxC,IAASU,UAAU+B,WAAWC,oBAG5C1B,EAAS,KAYoD2B,QAAQ,YAAYC,MAAM,UAArF,sBAKA,6BACG/B,EAAMU,KAAI,SAAAG,GAAI,OACb,cAAC,EAAD,CAAM7B,KAAM6B,gBCxCPmB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7fac5fe6.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Todo.css';\r\nimport {List, ListItem, ListItemAvatar, ListItemText } from '@material-ui/core';\r\n\r\nfunction Todo(props) {\r\n  return (\r\n    <List className= \"todo_list\">\r\n        <ListItemAvatar>\r\n          \r\n        </ListItemAvatar>\r\n        <ListItem>\r\n          <ListItemText primary={props.text}  secondary=\"dummy deadline⏰\" />\r\n        </ListItem>\r\n      { /*<li>{props.text}</li> */}\r\n    </List>\r\n  )\r\n}\r\n\r\nexport default Todo\r\n","import firebase from 'firebase';\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n        apiKey: \"AIzaSyDRMlTjwIbVQP72ZAyvUr5v6P4Uh3ZL-OY\",\r\n        authDomain: \"todo-app-24650.firebaseapp.com\",\r\n        databaseURL: \"https://todo-app-24650.firebaseio.com\",\r\n        projectId: \"todo-app-24650\",\r\n        storageBucket: \"todo-app-24650.appspot.com\",\r\n        messagingSenderId: \"868511197819\",\r\n        appId: \"1:868511197819:web:1aa279d96b8df72fb110de\",\r\n        measurementId: \"G-19MC3F2EZY\"\r\n});\r\n\r\nconst db = firebaseApp.firestore();\r\n\r\nexport default db;","import { useState, useEffect} from 'react';\nimport {Button, FormControl, Input, InputLabel } from '@material-ui/core';\nimport Todo from './Todo';\nimport './App.css';\nimport db from './firebase';\nimport firebase from 'firebase';\n\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n  const [input, setInput] = useState('');\n   // console.log(input);\n\n   // when the app loads, we need to listen to database and then we get some data using fetch, \n  useEffect(() => {\n    //this code fires when app.js loaded\n    db.collection('todos').orderBy('timestamp', 'desc').onSnapshot(snapshot => {\n       //console.log(snapshot.docs.map(doc => doc.data().todo));\n         setTodos(snapshot.docs.map(doc => doc.data().todo))\n    })\n  }, [])\n\n    \n\n  const addTodo = (event) => {\n    event.preventDefault(); //will stop the refreshing when everytime form submitted\n    //console.log(\"Im working!\");\n\n    db.collection('todos').add({\n      todo : input, // It will create a differenr id for each todo object\n      timestamp : firebase.firestore.FieldValue.serverTimestamp() //set the firebase timestamp(consistence) as every country has differnt time zone\n    })\n    //setTodos([...todos, input]);\n    setInput(''); // This will clear the input space up \n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Hello World!</h1>\n      <form>\n      <FormControl>\n      <InputLabel>✅ Write a todo</InputLabel>\n      <Input value={input} onChange={event => setInput(event.target.value)} />\n      </FormControl>\n\n      <Button  disabled={!input} type=\"submit\" onClick={addTodo} variant=\"contained\" color=\"primary\">\n       Add ToDo\n      </Button> \n      {/*<button type=\"submit\" onClick={addTodo} >Add ToDo</button>*/}\n\n      <ul>\n        {todos.map(todo => (\n          <Todo text={todo} />\n          //<li>{todo}</li>\n        ))}\n      </ul>\n      </form>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}